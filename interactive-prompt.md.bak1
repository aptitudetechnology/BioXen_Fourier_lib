def create_biological_vm(self):
    """Create a new biological VM using the Factory Pattern API with correct workflow order."""
    if not FACTORY_API_AVAILABLE:
        print("‚ùå Factory API not available. Cannot create biological VM.")
        return
        
    print("\nüß¨ Creating Biological VM...")
    print("=" * 50)
    
    # Step 1: Select Chassis (FIRST - Primary biological choice)
    print("\nüß¨ Step 1: Select Chassis")
    print("Choose the biological chassis for your VM:")
    print("1. E. coli (Prokaryotic chassis)")
    print("2. Yeast (Eukaryotic chassis)")  
    print("3. Orthogonal (Synthetic chassis)")
    print("4. ‚¨ÖÔ∏è Back to main menu")
    
    while True:
        try:
            chassis_choice = questionary.select(
                "Select chassis:",
                choices=[
                    "E. coli (Prokaryotic chassis)",
                    "Yeast (Eukaryotic chassis)", 
                    "Orthogonal (Synthetic chassis)",
                    "‚¨ÖÔ∏è Back to main menu"
                ]
            ).ask()
            
            if chassis_choice == "‚¨ÖÔ∏è Back to main menu":
                return
            elif chassis_choice == "E. coli (Prokaryotic chassis)":
                chassis_type = "ecoli"
                print("‚úÖ Selected E. coli chassis")
                break
            elif chassis_choice == "Yeast (Eukaryotic chassis)":
                chassis_type = "yeast" 
                print("‚ö†Ô∏è Yeast chassis is in development")
                print("‚úÖ Selected Yeast chassis")
                break
            elif chassis_choice == "Orthogonal (Synthetic chassis)":
                chassis_type = "orthogonal"
                print("‚ö†Ô∏è Orthogonal chassis is experimental")
                print("‚úÖ Selected Orthogonal chassis")
                break
        except KeyboardInterrupt:
            print("\n‚ùå Chassis selection cancelled.")
            return
        except Exception as e:
            print(f"‚ùå Error during chassis selection: {e}")
            return

    # Step 2: Select VM Type (SECOND - Infrastructure choice)
    print(f"\nüñ•Ô∏è Step 2: Select VM Type for {chassis_type} chassis")
    print("Choose the virtualization infrastructure:")
    print("1. Basic VM (Local virtualization)")
    print("2. XCP-ng VM (Enterprise hypervisor)")
    print("3. ‚¨ÖÔ∏è Back to chassis selection")
    
    while True:
        try:
            vm_choice = questionary.select(
                "Select VM type:",
                choices=[
                    "Basic VM (Local virtualization)",
                    "XCP-ng VM (Enterprise hypervisor)",
                    "‚¨ÖÔ∏è Back to chassis selection"
                ]
            ).ask()
            
            if vm_choice == "‚¨ÖÔ∏è Back to chassis selection":
                return self.create_biological_vm()  # Restart from chassis selection
            elif vm_choice == "Basic VM (Local virtualization)":
                vm_type = "basic"
                print("‚úÖ Selected Basic VM")
                break
            elif vm_choice == "XCP-ng VM (Enterprise hypervisor)":
                vm_type = "xcpng"
                print("‚ö†Ô∏è XCP-ng integration is in development")
                print("‚úÖ Selected XCP-ng VM")
                break
        except KeyboardInterrupt:
            print("\n‚ùå VM type selection cancelled.")
            return
        except Exception as e:
            print(f"‚ùå Error during VM type selection: {e}")
            return

    # Step 3: Get VM ID
    print(f"\nüÜî Step 3: Enter VM Identifier")
    try:
        vm_id = questionary.text(
            f"Enter VM ID for {chassis_type} {vm_type} VM:",
            default=f"{chassis_type}_{vm_type}_vm"
        ).ask()
        
        if not vm_id:
            print("‚ùå VM ID cannot be empty.")
            return
            
    except KeyboardInterrupt:
        print("\n‚ùå VM ID entry cancelled.")
        return
    except Exception as e:
        print(f"‚ùå Error getting VM ID: {e}")
        return

    # Step 4: Create the VM using Factory API
    print(f"\nüöÄ Step 4: Creating {chassis_type} {vm_type} VM...")
    try:
        # Use chassis selection as biological_type parameter for library compatibility
        vm = create_bio_vm(vm_id, chassis_type, vm_type)
        print(f"‚úÖ Successfully created {vm_type} VM '{vm_id}' with {chassis_type} chassis")
        
        # Store VM reference for management
        if not hasattr(self, 'active_vms'):
            self.active_vms = {}
        self.active_vms[vm_id] = vm
        
        # Optional: Start the VM and allocate resources
        start_vm = questionary.confirm(
            f"Would you like to start the {vm_id} VM now?"
        ).ask()
        
        if start_vm:
            try:
                # Start the VM
                vm.start()
                print(f"‚úÖ VM '{vm_id}' started successfully")
                
                # Allocate basic resources using v0.0.5 resource allocation
                print("üîß Allocating basic resources...")
                vm.allocate_resources({
                    'cpu_cores': 2,
                    'memory_gb': 4,
                    'storage_gb': 20,
                    'atp': 50.0,
                    'ribosomes': 10
                })
                print("‚úÖ Basic resources allocated")
                
                # Display resource usage
                usage = vm.get_resource_usage()
                print(f"üìä Current resource usage: {usage}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è VM created but failed to start: {e}")
                
    except Exception as e:
        print(f"‚ùå Failed to create biological VM: {e}")
        print("üí° Check that the Factory API is properly configured")
        return
    
    print(f"\nüéâ Biological VM Creation Complete!")
    print(f"VM ID: {vm_id}")
    print(f"Chassis: {chassis_type}")
    print(f"VM Type: {vm_type}")
    print(f"Status: {'Running' if start_vm else 'Created (not started)'}")